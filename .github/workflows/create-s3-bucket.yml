name: Deploy_to_S3

on:
  create: # Trigger when a new branch is created
    branches:
      - "*"
  push:
    branches:
      - "*"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    # Step 3: Set branch name variable
    - name: Set Branch Name
      run: |
        echo "BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9.-')" >> $GITHUB_ENV

    # Step 4: Create and Deploy to S3 (Optimized)
    - name: Deploy to S3
      run: |
        echo "Triggered on branch: ${{ env.BRANCH_NAME }}"
        if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
          BUCKET_NAME="main-bucket-myproject"
        else
          BUCKET_NAME="${{ env.BRANCH_NAME }}-myproject"
        fi

        echo "Using bucket: $BUCKET_NAME"

        # Check if bucket exists, create if not
        if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
          echo "Bucket $BUCKET_NAME already exists."
        else
          echo "Creating bucket: $BUCKET_NAME"
          aws s3api create-bucket --bucket "$BUCKET_NAME" --region us-east-1
        fi

        # Use s3 ls to check if new files exist before syncing
        if aws s3 ls s3://$BUCKET_NAME/ > s3_existing_files.txt; then
          echo "Checking for changes before syncing..."
          if diff s3_existing_files.txt <(ls -1) > /dev/null; then
            echo "No changes detected, skipping sync."
          else
            echo "Changes detected, uploading..."
            zip -r deployment.zip .
            aws s3 cp deployment.zip s3://$BUCKET_NAME/deployment.zip
          fi
        fi

    # Step 5: Set Up Python for AWS Lambda
    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r Data_Extraction/requirements.txt -t .

    - name: Package Lambda Function
      run: |
        zip -r lambda_code.zip .

    # Step 6: Deploy Lambda Function (Optimized)
    - name: Deploy Lambda Function
      run: |
        echo "Deploying Lambda Function on branch: ${{ env.BRANCH_NAME }}"

        aws lambda update-function-code \
          --function-name DataExtraction \
          --zip-file fileb://lambda_code.zip

        echo "Waiting for Lambda function update..."
        aws lambda wait function-updated --function-name DataExtraction

    - name: Update Lambda Environment Variables
      run: |
        aws lambda update-function-configuration \
          --function-name DataExtraction \
          --environment "Variables={BUCKET_NAME=${{ env.BRANCH_NAME }}-myproject}"

    # Step 7: Start Step Function Execution
    - name: Start Step Function Execution
      run: |
        aws stepfunctions start-execution \
          --state-machine-arn "arn:aws:states:us-east-1:180294214655:stateMachine:MyStateMachine-o02n93kz6" \
          --input '{"Disease": "Alzheimer"}'
